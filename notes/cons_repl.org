#+TITLE: Consistency and Replication


* Data-centric consistency models

A /data-centric consistency model/ is a contract that provides a set of guarantees to any process that accesses a distributed data store to provide a globally-consistent view.

[[./img/con_str.jpg]]

In a /strict consistency/ model, any read operation returns the value of the last write. In other words, any write is instantaneously visible to all the processes. This is an ideal but impossible model since distributed systems have no global clock and conflicts can arise (even in a local system).

[[./img/con_seq.jpg]]

The /sequential consistency/ model guarantees that all processes see the same interleaving of operations in some sequential order.

[[./img/con_cau.jpg]]

The /causal delivery/ model guarantees that all processes see the same, correct order for causally related operations. This means that concurrent operations may be seen in any order between different machines.

[[./img/con_fifo.jpg]]

The /FIFO consistency/ model guarantees that all the writes done by a process are seen by all the other processes in the order they were issued. Writes generated by different processes are considered concurrent.

[[./img/con_weak.jpg]]

The /weak/ consistency model moves the consistency problem in the hands of the programmer. 
- Sequentially consistent access to synchronization variables.
- No operation on a synchronization variable is allowed until all previous writes are completed.
- No read-write operation on data is allowed until all previous operations on synchronization variables are completed.

* TODO Client-centric consistency models

A /client-centric consistency model/ is a contract that provides a set of guarantees to any process that accesses a distributed data store, but from the persepctive of the client: no globally-consistent view is provided. This type of contract is suitable for systems where /eventual consistency/ is sufficient (e.g. Web caches, DNS).
