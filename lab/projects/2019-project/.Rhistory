M <- data.frame(n,name)
m
M
rm(M)
1:10
x <- 1:10
x
y <- rnorm(x,mean = 0,sd=1)
y
gaussian <- y
rm(y)
exp <- rexp(x,rate=1)
plot(gaussian)
t <- seq(5, 15, length=1000)
r <- dnorm(t,mean=10,sd = 3)
plot(t,r,type = "1", lwd=1)
plot(t,r,type = "l", lwd=1)
library(e1071)
kurtosis(r)
primo
c<-5
d<-read.csv('~/Scaricati/06_city_weather.csv')
names(d)
head(d)
unique(d)
summary(d)
names(s)
names(d)
summary(de.temp)
install.packages('plyr')
summary(d$TempMean)
names(d)
ddply(d,"City",fun=summary(TempMean))
library(plyr)
ddply(d,"City",fun=summary(TempMean))
ddply(d,"City",fun=summary(d$TempMean))
ddply(d,"City",fun=summary(.TempMean))
ddply(d,~City,fun=summary(TempMean))
ddply(d,~City,)
fun=summary(TempMean)
ddply(d,.(City),fun=summary(TempMean))
ddply(d,.(City),fun=summary(TempMean))
ddply(d,~City,fun=summary(TempMean))
library(plyr)
ddply(d,~City,fun=summary(TempMean))
ddply(d,.(City),fun=summary(TempMean))
ddply(d,.(City),summarize,fun=summary(TempMean))
ddply(d,~City,summarize,fun=summary(TempMean))
ddply(d,.(City),summarize,fun=summary(TempMean))
ddply(d,.(City),summarize,summary(TempMean))
ddply(d,.(City),summarize,summary
ddply(d,.(City),summarize,summary)
ddply(d,.(City),summarize)
plot(subset(d, City='Trento', select = "TempMean"))
names(d)
plot(subset(d, City='Trento', select = c(Month,TempMean))
plot(subset(d, City='Trento', select = c(Month,TempMean)))
plot(subset(d, "City"='Trento', select = c("Month","TempMean")))
plot(subset(d, City='Trento', select = c("Month","TempMean")))
plot(subset(d, City='Trento', select = c("Month","TempMean")))
load("/home/piermaria/Scrivania/SPE_assignment2/spe-network-simulator/alld.Rdata")
library(sp)
library(misc)
x<-c(11.296, 22.086,13.62,3.058,18.703,21.773,9.492,11.792,22.075,17.595)
y<-c(10.448, 7.994,8.659,12.932,14.739,11.64,5.377,13.621, 12.872, 19.72)
pnts<-cbind(x,y)
colors<-c("red", "forestgreen", "gray24", "royalblue1", "seagreen3", "sienna1", "gray0", "brown", "darkolivegreen")
limx <- c(min(x)-5,max(x)+5);
limy <- c(min(y)-5,max(y)+5);
plot(pnts[1,1], pnts[1,2], xlim=limx,ylim=limy, pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
points(pnts[10,1], pnts[10,2], pch=19, cex=3,col="black")
text(pnts[10,1], pnts[10,2], labels=10, cex=0.9, font=2, col = "white")
symbols(pnts[10,1], pnts[10,2], circles = 5, add = TRUE, inches = FALSE, fg ="black")
distances <-matrix(nrow=10,ncol=10)
sqrt((pnts[1,1]-pnts[2,1])**2 + (pnts[1,2]-pnts[2,2])**2)
for (i in 10:2){
for(j in (i-1):1){
distances[i,j] = sqrt((pnts[i,1]-pnts[j,1])**2 + (pnts[i,2]-pnts[j,2])**2)
}
}
for (i in 1:10){
distances[i,i] = 0
}
View(distances)
for (i in 1:9){
for(j in (i+1):10){
distances[i,j] = sqrt((pnts[i,1]-pnts[j,1])**2 + (pnts[i,2]-pnts[j,2])**2)
}
}
View(distances)
library(ggplot2)
p <- ggplot(points, aes(mt, mt))
p + geom_point()
p <- ggplot(pnts[,1], pnts[,2], aes(mt, mt))
plot(pnts[1,1], pnts[1,2], xlim=limx,ylim=limy, pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
points(pnts[10,1], pnts[10,2], pch=19, cex=3,col="black")
text(pnts[10,1], pnts[10,2], labels=10, cex=0.9, font=2, col = "white")
symbols(pnts[10,1], pnts[10,2], circles = 5, add = TRUE, inches = FALSE, fg ="black")
plot(pnts[1,1], pnts[1,2], xlim=25,ylim=25, pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
plot(pnts[1,1], pnts[1,2], xlim=c(0,25),ylim=c(0,25), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
plot(pnts[1,1], pnts[1,2], xlim=c(0,30),ylim=c(0,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
points(pnts[10,1], pnts[10,2], pch=19, cex=3,col="black")
text(pnts[10,1], pnts[10,2], labels=10, cex=0.9, font=2, col = "white")
symbols(pnts[10,1], pnts[10,2], circles = 5, add = TRUE, inches = FALSE, fg ="black")
par(xaxs='i',yaxs='i')
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
points(pnts[10,1], pnts[10,2], pch=19, cex=3,col="black")
text(pnts[10,1], pnts[10,2], labels=10, cex=0.9, font=2, col = "white")
symbols(pnts[10,1], pnts[10,2], circles = 5, add = TRUE, inches = FALSE, fg ="black")
par(xaxs='i',yaxs='i',pty="s")
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
points(pnts[10,1], pnts[10,2], pch=19, cex=3,col="black")
text(pnts[10,1], pnts[10,2], labels=10, cex=0.9, font=2, col = "white")
symbols(pnts[10,1], pnts[10,2], circles = 5, add = TRUE, inches = FALSE, fg ="black")
View(distances)
x<-c(1, 2, 0)
y<-c(1, 2, 0)
pnts<-cbind(x,y)
colors<-c("red", "forestgreen")
par(xaxs='i',yaxs='i',pty="s")
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:3){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
for(i in 2:4){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
for(i in 2:3){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
i=3
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
points(pnts[3,1], pnts[3,2], pch=19, cex=3,col=colors[3])
text(pnts[3,1], pnts[3,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[3,1], pnts[3,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
plot(pnts[1,1], pnts[1,2], xlim=c(-10,10),ylim=c(-10,10), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:3){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
points(pnts[3,1], pnts[3,2], pch=19, cex=3,col=colors[3])
text(pnts[3,1], pnts[3,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[3,1], pnts[3,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
points(0, 0, pch=19, cex=3,col=colors[3])
text(0,0, labels=i, cex=0.9, font=2, col = "white")
symbols(0,0, circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
points(0, 0, pch=19, cex=3,col=colors[3])
text(0,0, labels="3", cex=0.9, font=2, col = "white")
symbols(0,0, circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
points(0, 0, pch=19, cex=3,col="green")
text(0,0, labels="3", cex=0.9, font=2, col = "white")
symbols(0,0, circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
x<-c(1, 2, 0)
y<-c(1, 2, 0)
pnts<-cbind(x,y)
colors<-c("blue","red", "forestgreen")
par(xaxs='i',yaxs='i',pty="s")
plot(pnts[1,1], pnts[1,2], xlim=c(-10,10),ylim=c(-10,10), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:3){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
x<-c(11.296, 22.086,13.62,3.058,18.703,21.773,9.492,11.792,22.075,17.595)
y<-c(10.448, 7.994,8.659,12.932,14.739,11.64,5.377,13.621, 12.872, 19.72)
pnts<-cbind(x,y)
colors<-c("blue","red", "forestgreen", "gray24", "royalblue1", "seagreen3", "sienna1", "gray0", "brown", "darkolivegreen")
par(xaxs='i',yaxs='i',pty="s")
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
colors<-c("blue","red", "forestgreen", "gray24", "royalblue1", "seagreen3", "sienna1", "black", "brown", "darkolivegreen")
par(xaxs='i',yaxs='i',pty="s")
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
colors<-c("blue","red", "forestgreen", "darkorange2", "royalblue1", "seagreen3", "sienna1", "black", "brown", "darkolivegreen")
par(xaxs='i',yaxs='i',pty="s")
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
colors<-c("blue","red", "forestgreen", "darkorange2", "royalblue1", "seagreen3", "darkslategray3", "black", "brown", "darkolivegreen")
par(xaxs='i',yaxs='i',pty="s")
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=3,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=2.5,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=3,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=2.5,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=2.5,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
colors<-c("blue","red", "forestgreen", "darkorange2", "royalblue1", "seagreen3", "darkslategray3", "black", "brown4", "darkolivegreen")
par(xaxs='i',yaxs='i',pty="s")
plot(pnts[1,1], pnts[1,2], xlim=c(-5,30),ylim=c(-5,30), pch=19, cex=2.5,col="blue", ylab="Meters", xlab="Meters")
text(pnts[1,1], pnts[1,2], labels="1", cex=0.9, font=2, col = "white")
symbols(pnts[1,1], pnts[1,2], circles = 5, add = TRUE, inches = FALSE, fg="blue")
for(i in 2:10){
points(pnts[i,1], pnts[i,2], pch=19, cex=2.5,col=colors[i])
text(pnts[i,1], pnts[i,2], labels=i, cex=0.9, font=2, col = "white")
symbols(pnts[i,1], pnts[i,2], circles = 5, add = TRUE, inches = FALSE, fg =colors[i])
}
seconds<-1/exp_mean
exp_mean<-{10,60,110,160,210,260,310,360,410,460,510,560,610,660,710,760,810,860,910,960,1010,1060,1110,1160,1210,1260,1310,1360,1410,1460,1510}
seconds<-1/exp_mean
exp_mean<-c{10,60,110,160,210,260,310,360,410,460,510,560,610,660,710,760,810,860,910,960,1010,1060,1110,1160,1210,1260,1310,1360,1410,1460,1510}
exp_mean<-cbind{10,60,110,160,210,260,310,360,410,460,510,560,610,660,710,760,810,860,910,960,1010,1060,1110,1160,1210,1260,1310,1360,1410,1460,1510}
exp_mean<-c(10,60,110,160,210,260,310,360,410,460,510,560,610,660,710,760,810,860,910,960,1010,1060,1110,1160,1210,1260,1310,1360,1410,1460,1510)
seconds<-1/exp_mean
seconds
second<-matrix(nrow = 31,ncol = 1)
second<-matrix(nrow = 31,ncol = 1)
for(i in 1:30){
second<-exp_mean[i+1]-exp_mean[i]
}
second<-matrix(nrow = 31,ncol = 1)
for(i in 1:30){
second[i]<-exp_mean[i+1]-exp_mean[i]
}
View(second)
1/10
1/60
exp_divided<-exp_mean[]*7/3
exp_divided
exp_divided<-exp_mean[]*3/7
exp_divided
m <-matrix(nrow=25,ncol=1)
for(i in 1:25){
m[i,1] = 1 - exp(1)**(-i)*(1-i)
}
View(m)
exp(1)
m <-matrix(nrow=25,ncol=1)
e<-exp(1)
for(i in 1:25){
m[i,1] = 1 - e**(-i) - e** (-i)
}
View(m)
plot(m)
plot(m, type="l")
m <-matrix(nrow=14,ncol=1)
e<-exp(1)
for(i in c(0.001,0.002,0.003,0.01,0.02,0.5,0.8,1.1,1.3,1.6,1.9,2.2,2.5,2.7)){
m[i,1] = 1 - e**(-i) - e** (-i)
}
plot(m, type="l")
m <-matrix(nrow=19,ncol=1)
e<-exp(1)
for(i in c(0.001,0.002,0.003,0.01,0.02,0.5,0.8,1.1,1.3,1.6,1.9,2.2,2.5,2.7,3.1,3.3,3.6,3.9,4.1)){
m[i,1] = 1 - e**(-i) - e** (-i)
}
plot(m, type="l")
m <-matrix(nrow=24,ncol=1)
e<-exp(1)
for(i in c(0.001,0.002,0.003,0.01,0.02,0.5,0.8,1.1,1.3,1.6,1.9,2.2,2.5,2.7,3.1,3.3,3.6,3.9,4.1,4.3,4.5,4.7,4.9)){
m[i,1] = 1 - e**(-i) - e** (-i)
}
plot(m, type="l")
SELF_EXCLUDED = 1 # set to 1 if the multicasts are not sent to self, 0 otherwise
recv = read.table("recv.log", h=T)
setwd("~/Scrivania/DS1")
recv = read.table("recv.log", h=T)
recv = read.table("recv.log", h=T)
recv = read.table("recv.log", h=T)
recv = read.table("recv.log", h=T)
SELF_EXCLUDED = 1 # set to 1 if the multicasts are not sent to self, 0 otherwise
recv = read.table("recv.log", h=T)
send = read.table("send.log", h=T)
n_epoch_send = setNames(aggregate(src ~ epoch, send, FUN=function(x) length(unique(x))), c("epoch", "n_send_tot"))
n_epoch_recv = setNames(aggregate(dst ~ epoch, recv, FUN=function(x) length(unique(x))), c("epoch", "n_recv_tot"))
message("Number of senders/receivers per epoch")
merge(n_epoch_send, n_epoch_recv, by=c("epoch"), all=T)
message("Senders per epoch")
sndr_epoch = unique(send[c("epoch", "src")])
for (e in unique(sndr_epoch$epoch)) {
message("Epoch ", e)
print(sort(sndr_epoch[sndr_epoch$epoch == e, "src"]))
}
sendrecv = merge(send, recv, by=c("src", "seqn"), suffixes=c(".send", ".recv"), all=T)
write.table(sendrecv, "sendrecv.log")
message("Not delivered messages")
sendrecv[is.na(sendrecv$epoch.recv),]
message("Not sent but delivered messages")
sendrecv[is.na(sendrecv$epoch.send),]
message("Messages with epoch mismatch")
sendrecv[!is.na(sendrecv$epoch.recv) & !is.na(sendrecv$epoch.send) & sendrecv$epoch.send != sendrecv$epoch.recv,]
message("Duplicates")
dups = duplicated(recv[c("src", "seqn", "dst")])
sum(dups)
# number of receivers per message
n_msg_recv = setNames(
aggregate(dst ~ seqn + src + epoch, recv, FUN=function(x) length(unique(x))),
c("seqn", "src", "epoch", "n_recv"))
message("Messages delivered not to all the participants")
t = merge(n_msg_recv, n_epoch_recv, by=c("epoch"))
missed = t[t$n_recv != t$n_recv_tot - SELF_EXCLUDED,]
missed_with_dst = merge(recv, missed, all.x=F, all.y=T)
missed_with_dst_list = merge(
missed,
aggregate(dst ~ src + seqn, missed_with_dst, FUN=function(x) sort(x)),
by=c("src", "seqn"))
missed_with_dst_list[with(missed_with_dst_list, order(epoch)),]
SELF_EXCLUDED = 1 # set to 1 if the multicasts are not sent to self, 0 otherwise
recv = read.table("recv.log", h=T)
send = read.table("send.log", h=T)
n_epoch_send = setNames(aggregate(src ~ epoch, send, FUN=function(x) length(unique(x))), c("epoch", "n_send_tot"))
n_epoch_recv = setNames(aggregate(dst ~ epoch, recv, FUN=function(x) length(unique(x))), c("epoch", "n_recv_tot"))
message("Number of senders/receivers per epoch")
merge(n_epoch_send, n_epoch_recv, by=c("epoch"), all=T)
message("Senders per epoch")
sndr_epoch = unique(send[c("epoch", "src")])
for (e in unique(sndr_epoch$epoch)) {
message("Epoch ", e)
print(sort(sndr_epoch[sndr_epoch$epoch == e, "src"]))
}
sendrecv = merge(send, recv, by=c("src", "seqn"), suffixes=c(".send", ".recv"), all=T)
write.table(sendrecv, "sendrecv.log")
message("Not delivered messages")
sendrecv[is.na(sendrecv$epoch.recv),]
message("Not sent but delivered messages")
sendrecv[is.na(sendrecv$epoch.send),]
message("Messages with epoch mismatch")
sendrecv[!is.na(sendrecv$epoch.recv) & !is.na(sendrecv$epoch.send) & sendrecv$epoch.send != sendrecv$epoch.recv,]
message("Duplicates")
dups = duplicated(recv[c("src", "seqn", "dst")])
sum(dups)
# number of receivers per message
n_msg_recv = setNames(
aggregate(dst ~ seqn + src + epoch, recv, FUN=function(x) length(unique(x))),
c("seqn", "src", "epoch", "n_recv"))
message("Messages delivered not to all the participants")
t = merge(n_msg_recv, n_epoch_recv, by=c("epoch"))
missed = t[t$n_recv != t$n_recv_tot - SELF_EXCLUDED,]
missed_with_dst = merge(recv, missed, all.x=F, all.y=T)
missed_with_dst_list = merge(
missed,
aggregate(dst ~ src + seqn, missed_with_dst, FUN=function(x) sort(x)),
by=c("src", "seqn"))
missed_with_dst_list[with(missed_with_dst_list, order(epoch)),]
SELF_EXCLUDED = 1 # set to 1 if the multicasts are not sent to self, 0 otherwise
recv = read.table("recv.log", h=T)
send = read.table("send.log", h=T)
n_epoch_send = setNames(aggregate(src ~ epoch, send, FUN=function(x) length(unique(x))), c("epoch", "n_send_tot"))
n_epoch_recv = setNames(aggregate(dst ~ epoch, recv, FUN=function(x) length(unique(x))), c("epoch", "n_recv_tot"))
message("Number of senders/receivers per epoch")
merge(n_epoch_send, n_epoch_recv, by=c("epoch"), all=T)
message("Senders per epoch")
sndr_epoch = unique(send[c("epoch", "src")])
for (e in unique(sndr_epoch$epoch)) {
message("Epoch ", e)
print(sort(sndr_epoch[sndr_epoch$epoch == e, "src"]))
}
sendrecv = merge(send, recv, by=c("src", "seqn"), suffixes=c(".send", ".recv"), all=T)
write.table(sendrecv, "sendrecv.log")
message("Not delivered messages")
sendrecv[is.na(sendrecv$epoch.recv),]
message("Not sent but delivered messages")
sendrecv[is.na(sendrecv$epoch.send),]
message("Messages with epoch mismatch")
sendrecv[!is.na(sendrecv$epoch.recv) & !is.na(sendrecv$epoch.send) & sendrecv$epoch.send != sendrecv$epoch.recv,]
message("Duplicates")
dups = duplicated(recv[c("src", "seqn", "dst")])
sum(dups)
# number of receivers per message
n_msg_recv = setNames(
aggregate(dst ~ seqn + src + epoch, recv, FUN=function(x) length(unique(x))),
c("seqn", "src", "epoch", "n_recv"))
message("Messages delivered not to all the participants")
t = merge(n_msg_recv, n_epoch_recv, by=c("epoch"))
missed = t[t$n_recv != t$n_recv_tot - SELF_EXCLUDED,]
missed_with_dst = merge(recv, missed, all.x=F, all.y=T)
missed_with_dst_list = merge(
missed,
aggregate(dst ~ src + seqn, missed_with_dst, FUN=function(x) sort(x)),
by=c("src", "seqn"))
missed_with_dst_list[with(missed_with_dst_list, order(epoch)),]
SELF_EXCLUDED = 1 # set to 1 if the multicasts are not sent to self, 0 otherwise
recv = read.table("recv.log", h=T)
send = read.table("send.log", h=T)
n_epoch_send = setNames(aggregate(src ~ epoch, send, FUN=function(x) length(unique(x))), c("epoch", "n_send_tot"))
n_epoch_recv = setNames(aggregate(dst ~ epoch, recv, FUN=function(x) length(unique(x))), c("epoch", "n_recv_tot"))
message("Number of senders/receivers per epoch")
merge(n_epoch_send, n_epoch_recv, by=c("epoch"), all=T)
message("Senders per epoch")
sndr_epoch = unique(send[c("epoch", "src")])
for (e in unique(sndr_epoch$epoch)) {
message("Epoch ", e)
print(sort(sndr_epoch[sndr_epoch$epoch == e, "src"]))
}
sendrecv = merge(send, recv, by=c("src", "seqn"), suffixes=c(".send", ".recv"), all=T)
write.table(sendrecv, "sendrecv.log")
message("Not delivered messages")
sendrecv[is.na(sendrecv$epoch.recv),]
message("Not sent but delivered messages")
sendrecv[is.na(sendrecv$epoch.send),]
message("Messages with epoch mismatch")
sendrecv[!is.na(sendrecv$epoch.recv) & !is.na(sendrecv$epoch.send) & sendrecv$epoch.send != sendrecv$epoch.recv,]
message("Duplicates")
dups = duplicated(recv[c("src", "seqn", "dst")])
sum(dups)
# number of receivers per message
n_msg_recv = setNames(
aggregate(dst ~ seqn + src + epoch, recv, FUN=function(x) length(unique(x))),
c("seqn", "src", "epoch", "n_recv"))
message("Messages delivered not to all the participants")
t = merge(n_msg_recv, n_epoch_recv, by=c("epoch"))
missed = t[t$n_recv != t$n_recv_tot - SELF_EXCLUDED,]
missed_with_dst = merge(recv, missed, all.x=F, all.y=T)
missed_with_dst_list = merge(
missed,
aggregate(dst ~ src + seqn, missed_with_dst, FUN=function(x) sort(x)),
by=c("src", "seqn"))
missed_with_dst_list[with(missed_with_dst_list, order(epoch)),]
